/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({
    enabled: true,
    paths: {
        Ext: 'http://static.pinpointers.com/Lib/Sencha/ExtJS/4.2.1/src'
    }
});


Ext.application({

    requires: [
        'Ext.Loader',
        'Ext.window.MessageBox',
        'Ext.layout.container.Border'
    ],
    models: [
        'LastReportedEvent'
    ],
    stores: [
        'LastReportedEvent',
        'MapMarker'
    ],
    views: [
        'MainViewport',
        'CurrentLocationsGrid',
        'MapPanel'
    ],
    controllers: [
        'MapController'
    ],
    name: 'LiveUpdates',

    launch: function() {
        Ext.create('LiveUpdates.view.MainViewport');
        this.waitMask = new Ext.LoadMask(Ext.getBody(), {msg:"Please wait..."});
        this.waitMask.show();
        this.initialSetup = true;
        //First check for presence of a security token in the URL
        //var securityToken = this.getSecurityToken();
        //if(!Ext.isEmpty(securityToken)){

            //Here we set an extra param to be passed in every request made on the LastReportedEventStore
            var store = this.getLastReportedEventStore(), proxy;
            proxy = store.getProxy();
            proxy.setExtraParam('token', '44FF5FA1F9E644E7B82100000A0A00000004000000019ADF5DB313BE');
            proxy.sortParam =null;

            //store.on('load', this.storeloadhandler, this);
            this.getSessionData(store);
            //store.load();

        //} else {
            //this.waitMask.hide();
            //Ext.Msg.show({
                //title:'Missing Token?',
                //msg: 'Your access token is missing, please ensure this is present in the address bar and try again.',
                //closable: false,
                //icon: Ext.Msg.ERROR
            //});
        //}

    },

    getSecurityToken: function() {
        var queryStringObj = {};
        if(window.location.href.indexOf('?')!==-1) {
            queryStringObj = Ext.Object.fromQueryString(window.location.href.split("?")[1]);
        }
        return !Ext.isEmpty(queryStringObj.token) ? queryStringObj.token : null;

    },

    storeloadhandler: function(store, records, success) {

    },

    getSessionData: function(store) {
        store.load({
            scope: this,
            addRecords: true,
            callback: function(records, operation, success) {
                if(success){
                    if(this.initialSetup) {
                        this.waitMask.hide();
                        this.initialSetup=false;
                        //Would not normally do carry out the line below.
                        //Normally the token is passed as an query string param in the Url.
                        delete store.getProxy().extraParams['token'];
                        this.fireEvent('initapp');
                    }

                    //Decode any nextUrl property in the response and use for the url on the next store.load() call
                    var response = Ext.decode(operation.response.responseText);
                    if(Ext.isDefined(response.nextURL)) {
                        store.getProxy().url = 'location' + response.nextURL;
                    }
                    //Buffer the next fetch of data after 10 seconds
                    Ext.Function.defer(function(){
                        this.getSessionData(store);
                    }, 10000, this);

                } else {
                    //Error handling logic goes here...
                }
            }
        });
    },

    getLastReportedEventHtml: function(record) {
        var journeyStatusCls=(record.data.InJourney ? 'inJourney': 'outJourney'),
            rowBody = '<div class="lastreportedeventrow"><b>'+record.get("EventDTDisplay")+'</b> - '+record.get("Location")+'</div>';
        return '<div class = "unitname-header"><span class="journeystatusicon '+journeyStatusCls+'"></span></div><span class="unitname">' + record.get('UnitName') + '</span>' + rowBody;
    }

});
