/*
 * File: app/view/CurrentLocationsGrid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LiveUpdates.view.CurrentLocationsGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.currentlocationsgridpanel',

    requires: [
        'Ext.grid.column.Column',
        'Ext.grid.View',
        'Ext.selection.RowModel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button'
    ],

    border: 1,
    width: 220,
    bodyBorder: false,
    hideHeaders: true,
    store: 'LastReportedEvent',

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            columns: [
                {
                    xtype: 'gridcolumn',
                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                        return LiveUpdates.app.getLastReportedEventHtml(record);
                    },
                    dataIndex: 'UnitName',
                    flex: 1
                }
            ],
            viewConfig: {
                loadMask: false
            },
            selModel: Ext.create('Ext.selection.RowModel', {
                allowDeselect: true,
                mode: 'SINGLE',
                ignoreRightMouseSelection: true
            }),
            dockedItems: [
                {
                    xtype: 'toolbar',
                    dock: 'top',
                    defaultButtonUI: 'default',
                    items: [
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                button.up('gridpanel').getSelectionModel().deselectAll();
                            },
                            itemId: 'btnClear',
                            text: 'Clear Selection'
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    }

});