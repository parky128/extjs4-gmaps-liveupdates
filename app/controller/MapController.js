/*
 * File: app/controller/MapController.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('LiveUpdates.controller.MapController', {
    extend: 'Ext.app.Controller',

    stores: [
        'LastReportedEvent',
        'MapMarker'
    ],

    refs: [
        {
            ref: 'mapPanel',
            selector: 'mappanel'
        },
        {
            ref: 'locationsList',
            selector: 'currentlocationsgridpanel'
        },
        {
            ref: 'btnClear',
            selector: 'currentlocationsgridpanel #btnClear'
        }
    ],

    onGridpanelSelectionChange: function(model, selected, eOpts) {
        this.showSelected(!Ext.isEmpty(selected) ? selected[0]: null);
        this.getBtnClear.setVisible(!Ext.isEmpty(selected));
    },

    onBtnResetClick: function(button, e, eOpts) {
        //this.getLocationsList().getSelectionModel().deselectAll();
        this.resetMap();

    },

    onBtnTrafficToggle: function(button, pressed, eOpts) {
        this._trafficLayer.setMap(pressed ? this._map : null);
        button.setText(pressed ? 'Hide Traffic' : 'Show Traffic');
    },

    init: function(application) {
                this.app=application;
                this.app.on('initapp', this.initMap, this);

                this.getLastReportedEventStore().on('load', function(store, records) {
                    Ext.each(records, function(item){
                        this.updateUntMarker(item);
                    },this);

                },this);


        this.control({
            "gridpanel": {
                selectionchange: this.onGridpanelSelectionChange
            },
            "mappanel #btnReset": {
                click: this.onBtnResetClick
            },
            "mappanel #btnTraffic": {
                toggle: this.onBtnTrafficToggle
            }
        });
    },

    initMap: function() {
        this._map = new google.maps.Map(this.getMapPanel().body.dom, {
            zoom: 5,
            center:  new google.maps.LatLng(54.559322587438636, -4.1748046875)
        });

        this._trafficLayer = new google.maps.TrafficLayer();

        this.drawMarkers();
        this.resetMap();
    },

    drawMarkers: function() {
        this.getLastReportedEventStore().each( function(r) {
            this.drawUntMarker(r);
        }, this);
    },

    drawUntMarker: function(r) {
        var lat = r.get('Lat'), lon = r.get('Lon'), mapIcon = r.get('MapIcon'), mapMarkerStore = this.getMapMarkerStore();
        if (!Ext.isEmpty(lat)&&!Ext.isEmpty(lon)) {
            var markerImage = this.getUnitMarkerIcon(mapIcon, r.get('Heading')),
                pos = new google.maps.LatLng(lat,lon);
            var markerOptions = {
                position: pos,
                map: this._map,
                icon: markerImage,
                infoWindow: null,
                infoWindowIsOpen: false,
                labelContent: r.get('UnitName'),
                labelAnchor: this.getUnitMarkerLabelPosition(mapIcon),
                labelClass: 'untLabel',
                inJourney: r.get('InJourney'),
                untID: r.getId()

            };


            unitMarker = new MarkerWithLabel(markerOptions);
            this.setLabelStyle(unitMarker);
            google.maps.event.addListener(unitMarker,'click', Ext.Function.bind(this.showMarkerInfoWindow, this, [unitMarker]));

            //Here we add a record to our MapMarker store which will allow us to store by UntID each of the markers on the map
            //for easier retrieval later on
            markerRec = mapMarkerStore.findExact('UntID', r.data.UntID);
            mapMarkerStore.add({UntID:r.get('UntID'), Marker:unitMarker});


        }
    },

    getUnitMarkerIcon: function(iconNum, heading) {
        if (this.is3DIcon(iconNum)) {
            return {url: "http://images.pinpointers.com/mapicons2/3DCarIcons41x37.png?v=2",size: new google.maps.Size(41,37),origin: new google.maps.Point(1476*(iconNum-30001)+(41*(Math.round((heading - 5) / 10) % 36)),0),anchor: new google.maps.Point(20,18),scaledSize: null};
        }
        if(this.is24x24Icon(iconNum)) {
            return  {url: "http://images.pinpointers.com/Sprites/all-trans-v-1-5-0.png",size: new google.maps.Size(24,24),origin: new google.maps.Point(24*(iconNum-10090),48),anchor: new google.maps.Point(12,12),scaledSize: null};
        }
        if(this.isSmartPhoneIcon(iconNum)) {
            return {url: "http://images.pinpointers.com/mapicons2/allphones-trans.png",size: new google.maps.Size(28,38),origin: new google.maps.Point(28*(iconNum-14000),38),anchor: new google.maps.Point(10,30),scaledSize: null};
        }
        if(this.isOtherPhoneIcon(iconNum)) {
            return {url: "http://images.pinpointers.com/mapicons2/allphones-trans.png",size: new google.maps.Size(19,38),origin: new google.maps.Point(19*(iconNum-13000),0),anchor: new google.maps.Point(10,30),scaledSize: null};
        }

        if(iconNum >=11001 && iconNum <= 11004) {
            return {url: "http://images.pinpointers.com/Sprites/all-trans-v-1-5-0.png",size: new google.maps.Size(16,16),origin: new google.maps.Point(16*(iconNum-10912),24),anchor: new google.maps.Point(8,8),scaledSize: null};
        }

        //Default case
        return  {url: "http://images.pinpointers.com/Sprites/all-trans-v-1-5-0.png",size: new google.maps.Size(16,16),origin: new google.maps.Point(16*(iconNum-10001),24),anchor: new google.maps.Point(8,8),scaledSize: null};

    },

    is24x24Icon: function(iconNum) {
        return ((iconNum >= 10090 && iconNum <= 10125) || (iconNum >= 20007 && iconNum <= 20028) || (iconNum >= 50000 && iconNum <= 50035) || iconNum == 110 || iconNum == 210 || iconNum == 220 || iconNum==1090 || iconNum==1100);
    },

    is3DIcon: function(iconNum) {
        return (iconNum >= 30001 && iconNum <= 30010);
    },

    isSmartPhoneIcon: function(iconNum) {
        return ((iconNum >= 14000 && iconNum <= 14008));
    },

    isOtherPhoneIcon: function(iconNum) {
        return ((iconNum >= 13000 && iconNum <= 13008));
    },

    getUnitMarkerLabelPosition: function(iconNum) {
        if (this.is3DIcon(iconNum)) {
            return new google.maps.Point(40, -15);
        } else if(this.is24x24Icon(iconNum)) {
            return new google.maps.Point(40, -12);
        } else if(this.isSmartPhoneIcon(iconNum)) {
            return new google.maps.Point(40, -10);
        } else if(this.isOtherPhoneIcon(iconNum)) {
            return new google.maps.Point(40, -10);
        }
        else {
            return new google.maps.Point(40, -8);
        }
    },

    setLabelStyle: function(marker) {

        marker.labelStyle={ color: marker.inJourney ? 'green':'red'};
        marker.label.setStyles();
    },

    resetMap: function() {
        var bounds = new google.maps.LatLngBounds(), mapMarkerStore = this.getMapMarkerStore(), ctr=0;
        mapMarkerStore.each( function(r) {
            m = r.get('Marker');
            if(m.getVisible()){
                bounds.extend(r.get('Marker').getPosition());
                ctr++;
            }
        }, this);

        this._map.setCenter(bounds.getCenter());

        if(ctr===1){
            this._map.setZoom(16);
        } else {
            this._map.fitBounds(bounds);
        }

    },

    updateUntMarker: function(r) {
        markerRec = this.getMapMarkerStore().findRecord('UntID',r.get('UntID'));
        if(!Ext.isEmpty(markerRec)) {
            var newPosition = new google.maps.LatLng(r.get('Lat'), r.get('Lon')), marker = markerRec.get('Marker');

            marker.setIcon(this.getUnitMarkerIcon(r.get('MapIcon'), r.get('Heading')));
            marker.setPosition(newPosition);
            this.setLabelStyle(marker);

            if (marker.infoWindow!==null) {
                if(marker.infoWindowIsOpen===true) {
                    marker.infoWindow.close();
                    marker.infoWindow.setContent(this.untInfoWindowContent(marker, r.data));
                    marker.infoWindow.open(this._map, marker);
                } else {
                    marker.infoWindow.setContent(this.untInfoWindowContent(marker, r.data));
                }
            }
        }
    },

    showMarkerInfoWindow: function(marker) {
        if (Ext.isObject(this.lastUntMarker) && this.lastUntMarker.id!==marker.untID) {
                this.hideMarkerInfoWindow(this.lastUntMarker);
            }
            if (!marker.infoWindowIsOpen) {
                r = this.getLastReportedEventStore().findRecord('UntID',marker.untID);
                if (!Ext.isEmpty(r)) {
                    if (marker.infoWindow===null) {

                        iw = new google.maps.InfoWindow({
                            maxWidth: 300,
                            disableAutoPan: true,
                            content: this.untInfoWindowContent(marker, r.data)

                        });
                        google.maps.event.addListener(iw,'closeclick', Ext.Function.bind(this.markerInfoWindowClose, this, [marker,iw]));
                        marker.infoWindow=iw;
                    }
                }
                marker.infoWindow.open(this._map, marker);
                marker.infoWindowIsOpen=true;
                this.lastUntMarker=marker;
            }
    },

    untInfoWindowContent: function(marker, d) {
        return this.app.getLastReportedEventHtml(this.getLastReportedEventStore().getById(marker.untID));
    },

    markerInfoWindowClose: function(marker) {
        marker.infoWindowIsOpen=false;
    },

    hideMarkerInfoWindow: function(marker) {

        if (Ext.isObject(marker) && Ext.isObject(marker.infoWindow)) {
            marker.infoWindow.close();
            marker.infoWindowIsOpen=false;

        }

    },

    showSelected: function(record) {
        if(!Ext.isEmpty(record)) {
            this.getMapMarkerStore().each(function(rec){
                rec.get('Marker').setVisible(rec.get('UntID')===record.get('UntID'));
                if(rec.get('UntID')===record.get('UntID')){
                    this.showMarkerInfoWindow(rec.get('Marker'));
                }

            },this);

        } else {
             this.getMapMarkerStore().each(function(rec){
                rec.get('Marker').setVisible(true);
            },this);

            if(!Ext.isEmpty(this.lastUntMarker)){
                this.hideMarkerInfoWindow(this.lastUntMarker);
            }
        }



        //centre\zoom on selected vehicle
        this.resetMap();


    }

});
